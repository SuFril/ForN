# Последовательность из l целых чисел b1,b2,...,bl (1≤b1≤b2≤...≤bl≤n) называется хорошей,
# если каждое число делит без остатка следующее число в последовательности.
# Более формально,  для всех i (1≤i≤l-1).

# Вам даны n и k, найдите количество хороших последовательностей длины k.
# Так как ответ может быть достаточно большим, выведите его по модулю 1000000007.

n, k = map(int,input().split())
dp = [[0]*n for _ in range(k)]
for i in range(k):
    dp[i][0] = 1
for i in range(n):
    dp[0][i] = 1
for i in range(k-1):
    for j in range(n):
        for kak in range(j,n,j+1):
            if not(kak == 0 and j ==0):
                dp[i+1][kak] += dp[i][j]
print((sum(dp[-1]))%(10**9+7))

# Петя и Маша играют в увлекательную игру.
# Маша загадывает число от 1 до n, записывает его на чистый тетрадный лист, кладёт в конверт и запечатывает.
# После этого Петя пытается это число отгадать. Он может задавать любые вопросы про это число: «Верно ли, что это число равно трем?», «Верно ли, что это число – число Фибоначчи?», «Верно ли, что это число простое?» и так далее. Получив ответ «да», Петя отдает Маше a конфет, а в случае ответа «нет» — b конфет.
# В какой-то момент Петя произносит сакраментальную фразу: «Я знаю, что это за число».
# После этого они распечатывают конверт в присутствии свидетелей,
# убеждаются в Петиной правоте, и Маша получает внушительную порцию конфет, а Петя — моральное удовлетворение.
# Петя очень любит играть в эту игру, но его кондитерские запасы ограничены. П
# оэтому Петя хочет выяснить, какое минимальное количество конфет может ему потребоваться, чтобы отгадать Машино число в худшем случае.
# Помогите Пете найти указанный минимум.


# Входной файл содержит три целых числа: n (1≤n≤1000), a и b (0≤a,b≤10**6)

n, a, b = map(int,input().split())
dinamika = [1000000001]*(n+1)
if n == 1:
    print(0)
    exit()
dinamika[0] = 0
dinamika[1] = 0
dinamika[2] = max(a,b)

for i in range(3,n+1):
    kaka = min(dinamika[i],min(a,b)+dinamika[i-1])
    for j in range(1,i):
        kaka = min(kaka,min(max(dinamika[j]+max(a,b),dinamika[i-j]+min(a,b)),max(dinamika[j]+min(a,b),dinamika[i-j]+max(a,b))))
    dinamika[i] = kaka
print(dinamika[-1])